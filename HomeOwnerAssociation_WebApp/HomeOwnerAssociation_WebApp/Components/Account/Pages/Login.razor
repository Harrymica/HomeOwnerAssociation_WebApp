@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using HomeOwnerAssociation_WebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager navMag
@layout LoginLayout


<PageTitle>Log in</PageTitle>

<style scoped>
    .row {
        margin-left: 10px;
    }

    body {
        background-color: #181b27;
    }
</style>

<div class="flex min-h-[100dvh] flex-col">
    <header class="bg-[#181b27] px-4 py-4 sm:px-6 md:py-6">
        <div class="container mx-auto flex max-w-6xl items-center justify-between">
            <a class="flex items-center" href="#">
                <svg xmlns="http://www.w3.org/2000/svg"
                     width="24"
                     height="24"
                     viewBox="0 0 24 24"
                     fill="none"
                     stroke="currentColor"
                     stroke-width="2"
                     stroke-linecap="round"
                     stroke-linejoin="round"
                     class="h-6 w-6 text-white">
                    <path d="m8 3 4 8 5-5 5 15H2L8 3z"></path>
                </svg>
                <span class="ml-2 text-lg font-medium text-white">Home Owner Association</span>
            </a>
            <div class="flex items-center gap-4 md:hidden">
                <a class="text-sm font-medium text-white hover:underline" href="#">
                    Log in
                </a>
                <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2">
                    Get started
                </button>
            </div>
            <div class="hidden items-center gap-4 md:flex">
                <a class="text-sm font-medium text-white hover:underline" href="Account/Register">
                    Sign up
                </a>
                <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2">
                    Get started
                </button>
            </div>
        </div>
    </header>
    <main class="flex-1">
        <section class="bg-[#181b27] py-12 md:py-20 lg:py-28">
            <div class="container mx-auto max-w-6xl px-4 sm:px-6">
                <div class="grid grid-cols-1 gap-8 md:grid-cols-2 md:gap-12">
                    <div class="flex flex-col items-start justify-center">
                        <h1 class="text-3xl font-bold text-white sm:text-4xl md:text-5xl">Welcome to Home Owner Association </h1>
                        <p class="mt-4 text-lg text-gray-400">
                            @* Start your investment journey with our secure and user-friendly platform. *@
                        </p>
                    </div>
                    <div class="rounded-lg bg-white p-6 shadow-lg sm:p-8 md:p-10 lg:p-12">
                        <h2 class="text-2xl font-bold text-center">Login</h2>
                        <section>
                            <StatusMessage Message="@errorMessage" />
                            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                                <DataAnnotationsValidator />

                                <hr />
                                <ValidationSummary class="text-danger" role="alert" />
                                <div>
                                    <label for="email" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Email</label>
                                    <InputText @bind-Value="Input.Email" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                                </div>
                                <div>
                                    <label for="password" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Password</label>
                                    <InputText type="password" @bind-Value="Input.Password" class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50" autocomplete="current-password" aria-required="true" placeholder="password" />
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>
                                <div class="checkbox mb-3">
                                    <label class="form-label">
                                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                        Remember me
                                    </label>
                                </div>
                                <div>
                                    <button type="submit" class="inline-flex text-white max-w-24 items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2 w-full" style="background-color:#181b27">Log in</button>
                                </div>
                                <div>
                                    @* <p>
                                    <a href="Account/ForgotPassword">Forgot your password?</a>
                                    </p> *@
                                    <p>
                                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>

                                    </p>

                                </div>
                            </EditForm>
                        </section>
                    </div>
                </div>
            </div>
        </section>
    </main>
    <footer class="bg-[#181b27] py-6">
        <div class="container mx-auto max-w-6xl px-4 sm:px-6">
            <div class="flex flex-col items-center justify-between gap-4 sm:flex-row">
                <p class="text-sm text-gray-400">© @DateTime.Now.Year Home Owner Association. All rights reserved.</p>
                <div class="flex items-center gap-4">
                    <a class="text-sm font-medium text-gray-400 hover:text-gray-300" href="#">
                        Terms of Service
                    </a>
                    <a class="text-sm font-medium text-gray-400 hover:text-gray-300" href="#">
                        Privacy Policy
                    </a>
                </div>
            </div>
        </div>
    </footer>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        Console.WriteLine("check");
        if (result.Succeeded)
        {
            navMag.NavigateTo("/");
            Logger.LogInformation("User logged in.");
            //RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
