@page "/property"
@layout CustomLayout
@inject IPropertyServiceRepo propertyService
@inject IToastService toast
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IConfiguration config
@inject IDbContextFactory<ApplicationDbContext> _factory

<BlazoredToasts />

<div class="bg-gray-100 flex-1 p-6 md:mt-16">

    <div class="relative">
        <input  @bind-value="@SearchInput" type="search" placeholder="Search Commitee..." class="w-full pl-10 pr-16 py-2 text-sm text-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <button class="absolute right-0 top-0 h-full flex items-center justify-center w-10 bg-blue-500 hover:bg-blue-700 text-white rounded-r-md" @onclick="Search">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
        </button>
        <span class="absolute inset-y-0 left-0 flex items-center pl-2">
            <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="(link unavailable)">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </span>
    </div>



    <div class="myTable">

        <!--Grid Form-->
        <div class="flex flex-1  flex-col md:flex-row lg:flex-row mx-2">
            <div class="mb-2 border-solid border-gray-300 rounded border shadow-sm w-full">
                <div class="bg-gray-200 px-2 py-3 border-solid border-gray-200 border-b">
                  Property
                    <button class="bg-transparent hover:bg-green-500 text-green-dark font-semibold hover:text-white py-2 px-4 border border-green hover:border-transparent rounded">
                        <a href="/addproperty" class="" style="cursor:pointer; text-decoration:none">
                            +Add Properties
                        </a>
                    </button>
                </div>
                <div class="p-3">
                    <table class="table-responsive w-full rounded">
                        <thead>
                            <tr>
                                <th class="border  px-1 py-2"> Logo</th>
                                <th class="border w-1/4 px-4 py-2"> Name</th>
                                <th class="border w-1/6 px-4 py-2">Address</th>
                                <th class="border w-1/6 px-4 py-2">Location</th>
                                <th class="border w-1/7 px-4 py-2">PropertyType</th>
                                <th class="border w-1/7 px-4 py-2">Units</th>
                                <th class="border w-1/5 px-4 py-2">Actions</th>
                            </tr>
                        </thead>
                        @if (properties != null)
                        {
                            foreach (var item in properties)
                            {

                                <tbody>
                                    <tr>

                                        <td class="border px-1 py-2">
                                            @if (string.IsNullOrWhiteSpace(item.Logo) == false)
                                            {
                                                <img src="@CreateWebPath(item.Logo)" style="height:40px; width:40px; border-radius:15px" />
                                            }
                                        </td>
                                        <td class="border px-4 py-2">@item.Name</td>
                                        <td class="border px-4 py-2">@item.Address</td>
                                        <td class="border px-4 py-2">@item.Location</td>
                                        <td class="border px-4 py-2">
                                            @foreach (var Typeitems in _propertyType.Where(u => u.Id == item.Units))
                                            {
                                                <option> @Typeitems.UnitType</option>
                                            }
                                         </td>
                                        
                                        <td class="border px-4 py-2">@item.Units</td>
                                       
                                        

                                      
                                        <td class="border px-2 py-2">
                                            <a class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-white">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-white" @onclick="() => EditCommitee(item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-red-500" @onclick="() => Delete(item)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>

                                </tbody>

                            }
                        }
                    </table>
                </div>
            </div>
        </div>
        <!--/Grid Form-->
    </div>
</div>



@code {


    public List<Property> properties = new List<Property>();
    private List<PropertyType> _propertyType = new List<PropertyType>();

    private string? SearchInput;

    protected override async Task OnInitializedAsync()
    {


        var property = await propertyService.GetAllPropertiresAsync();
        properties = property;

        using var db = await _factory.CreateDbContextAsync();
        _propertyType = await db.PropertyTypes.ToListAsync();
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    public async Task Search()
    {
        if(SearchInput != null)
        {
            using var db = await _factory.CreateDbContextAsync();
            var result = db.Properties.Where(u => u.Name.Contains(SearchInput)).ToListAsync();


            properties = await  result;

        }


    }

    public async Task Delete(Property prop)
    {
        try
        {
            await propertyService.DeletePropertyAsync(prop.Id);
            toast.ShowWarning($"{prop.Name} is deleted succesfully");
            await Task.Delay(500);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            toast.ShowWarning($"{ex.Message}");
        }
        

    }

    public async Task EditCommitee(int Id)
    {
        NavigationManager.NavigateTo($"addproperty/{Id}");
    }

}