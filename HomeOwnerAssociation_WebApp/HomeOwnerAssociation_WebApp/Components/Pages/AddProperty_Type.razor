@page "/addtype"
@page "/addtype/{id:int?}"
@using HomeOwnerAssociation_WebApp.Services.PropertyTypeService
@layout CustomLayout
@inject IPropertyTypeServiceRepo TypeServ
@rendermode InteractiveServer
@inject IToastService toast
@inject IConfiguration config
@inject IWebHostEnvironment WebHotEnv
@inject IDbContextFactory<ApplicationDbContext> _factory

<BlazoredToasts />

<div class="bg-gray-100 flex-1 p-6 md:mt-16">

    <p>@ErrorMsg</p>

    <div class="row">
        <div class="col-lg-12">

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Property</h5>

                    <!-- General Form Elements -->
                    <EditForm Model="_type" OnSubmit="Submit" enctype="multipart/form-data" Enhance FormName="addtype">
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-8">
                                <input @bind-value="_type.UnitType" type="text" class="form-control">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="Address" class="col-sm-2 col-form-label">Monthly Fee</label>
                            <div class="col-sm-8">
                                <input @bind-value="_type.MonthlyFee" type="number" class="form-control">
                            </div>
                        </div>
                       

                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label">Add Property</label>
                            <div class="col-sm-10">
                                <button type="submit" class="btn btn-primary">Submit Form</button>
                            </div>
                        </div>
                    </EditForm>

                    <!-- End General Form Elements -->

                </div>
            </div>

        </div>
    </div>
</div>




@code {

    [Parameter]

    public int? Id { get; set; }

    [SupplyParameterFromForm(FormName = "addtype")]
    private PropertyType _type { get; set; } = new();

    private string? ErrorMsg;
    private IBrowserFile? file;
    private long maxSize = 1024 * 1024 * 10;
    private List<PropertyType> _propertyType = new List<PropertyType>();
    private string? imageUrl;

    protected override async Task OnInitializedAsync()
    {
        using var db = await _factory.CreateDbContextAsync();
        _propertyType = await db.PropertyTypes.ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            if (TypeServ != null)
            {

                var result = await TypeServ.GetPropertyTypeById(Id.Value);
               
                _type = result;
            }
        }

    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            string NewFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "profile", NewFileName);

            string relativePath = Path.Combine("profile", NewFileName);
            Directory.CreateDirectory(Path.Combine(Path.Combine(config.GetValue<string>("FileStorage")!, "profile")));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            //errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    }

    public async Task Submit()
    {
        if (_type != null)
        {
            try
            {
                string relativePath = await CaptureFile();
                //_type.Logo = relativePath;


                file = null;

                if (Id != null)
                {
                    await TypeServ.EdithPropertiesType(_type);
                    toast.ShowInfo($"{_type.UnitType}, Property Edited Succesfully");

                }
                else
                {

                    await TypeServ.AddPropertiesType(_type);
                    toast.ShowSuccess($"{_type.UnitType}, Property Added Succesfully");
                }

            }
            // catch (Exception ex)
            // {
            //     toast.ShowError($"{ex.Message}");
            //         ErrorMsg = ex.Message;
            // }
            catch (NullReferenceException ex)
            {
                toast.ShowError($"{ex.Message}");
                ErrorMsg = ex.Message;
            }
            // catch (FileNotFoundException ex)
            // {
            //     Console.WriteLine($"File not found error: {ex.Message}");
            // }


        }

    }
}