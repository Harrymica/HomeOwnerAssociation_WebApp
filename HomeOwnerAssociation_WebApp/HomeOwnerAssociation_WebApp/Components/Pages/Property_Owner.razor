@page "/specificproperty"
@page "/specificproperty/{id:int?}"
@layout CustomLayout
@inject IPropertyServiceRepo propertyService
@inject IPropertyOwnerService OwnerService
@inject IToastService toast
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IConfiguration config
@inject IWebHostEnvironment WebHotEnv
@inject IDbContextFactory<ApplicationDbContext> _factory
@inject IJSRuntime jSRuntime

<BlazoredToasts />


        @if (clicked == true)
        {
    <div class="bg-gray-100 flex-1 p-6 md:mt-16">

        <p>@ErrorMsg</p>

        <div class="row">
            <div class="col-lg-12">

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Add Property</h5>

                        <!-- General Form Elements -->
                       @*  <EditForm Model="_property" OnSubmit="Submit" enctype="multipart/form-data" Enhance FormName="addproperty"> *@
                            <div class="row mb-3">
                                <label for="inputText" class="col-sm-2 col-form-label">Full Name</label>
                                <div class="col-sm-8">
                                    <input @bind-value="_property.Name" type="text" class="form-control">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="Address" class="col-sm-2 col-form-label">Address</label>
                                <div class="col-sm-8">
                                    <input @bind-value="_property.Address" type="text" class="form-control">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="text" class="col-sm-2 col-form-label">Location</label>
                                <div class="col-sm-8">
                                    <input @bind-value="_property.Location" type="text" class="form-control">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="text" class="col-sm-2 col-form-label">Logo</label>
                                <div class="col-sm-8">
                                    <InputFile id="image" OnChange="LoadFiles"
                                               name="file"
                                               type="file" class="form-control" multiple accept=".png, .jpg, .jpeg"> </InputFile>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="text" class="col-sm-2 col-form-label">Units</label>
                                <div class="col-sm-8">
                                    <input @bind-value="_property.Units" type="number" class="form-control">
                                </div>
                            </div>

                            <div class="row mb-3">
                                <label for="text" class="col-sm-2 col-form-label">PropertyType</label>

                                <div class="col-sm-8">
                                    <InputSelect @bind-Value="_property.Units" type="text" class="form-control">
                                        <option disabled>Select option</option>
                                        @foreach (var items in _propertyType)
                                        {
                                            <option value="@items.Id"> @items.UnitType</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <label class="col-sm-2 col-form-label">Add Property</label>
                                <div class="col-sm-10">
                                <button type="submit" @onclick="AddProp" class="btn btn-primary">Submit Form</button>
                                </div>
                            </div>
                        @* </EditForm> *@

                       

                    </div>
                </div>

            </div>
        </div>
    </div>
        }
        else
        {
    

@if (displayPdf == true)
{
    <div class="row">
        <div class="col-12">
            <div class="card h-300">
                <div id="iframeId">

                   
                </div>
            </div>
        </div>
    </div>

}

<div class="relative">
    <input @bind-value="@SearchInput" type="search" placeholder="Search Commitee..." class="w-full pl-10 pr-16 py-2 text-sm text-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
    <button class="absolute right-0 top-0 h-full flex items-center justify-center w-10 bg-blue-500 hover:bg-blue-700 text-white rounded-r-md" @onclick="Search">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
    </button>
    <span class="absolute inset-y-0 left-0 flex items-center pl-2">
        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="(link unavailable)">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
    </span>
</div>
<div class="flex justify-end relative inline-block text-left ">

    <div>
        <button type="submit" @onclick="@(p=> DownloadFile("report.pdf", "pdf-content"))">
            <img src="/save.png" class="iconimg" style="height:35px" />


        </button>
    </div>
    <div>
        <button type="submit" @onclick="@(p=> OpentoIframe("iframeId", "pdf-content"))">
            <img src="/print.png" class="iconimg" style="height:35px" />

        </button>

    </div>
    <div class="text">
            <button class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-4" @onclick="Click">

            <i class="fas fa-plus"></i>
            Add Property
        </button>
    </div>

</div>


<div id="pdf-content">

    <div class="myTable">
        <div class="bg-white shadow-md rounded-lg p-6 col-span-full">
            @* <h2 class="text-xl font-semibold mb-2">Maintenace History</h2> *@
                    <table class="table table-striped w-full text-left">
                        <thead>
                            <tr>
                                <th class="border px-1 py-2">Logo</th>
                                <th class="border w-1/4 px-4 py-2">Name</th>
                                <th class="border w-1/6 px-4 py-2">Address</th>
                                <th class="border w-1/6 px-4 py-2">Location</th>
                                <th class="border w-1/7 px-4 py-2">PropertyType</th>
                                <th class="border w-1/7 px-4 py-2">Units</th>
                                <th class="border w-1/5 px-4 py-2">Actions</th>
                            </tr>
                        </thead>
                        @if (properties != null)
                        {
                            foreach (var item in properties)
                            {

                                <tbody>
                                    <tr>

                                        <td class="border px-1 py-2">
                                            @if (string.IsNullOrWhiteSpace(item.Logo) == false)
                                            {
                                                <img src="@CreateWebPath(item.Logo)" style="height:40px; width:40px; border-radius:15px" />
                                            }
                                        </td>
                                        <td class="border px-4 py-2">@item.Name</td>
                                        <td class="border px-4 py-2">@item.Address</td>
                                        <td class="border px-4 py-2">@item.Location</td>
                                        <td class="border px-4 py-2">
                                            @foreach (var Typeitems in _propertyType.Where(u => u.Id == item.Units))
                                            {
                                                <option> @Typeitems.UnitType</option>
                                            }
                                        </td>

                                        <td class="border px-4 py-2">@item.Units</td>




                                        <td class="border px-2 py-2">
                                            <a class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-white">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-white" @onclick="() => EditCommitee(item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-red-500" @onclick="() => Delete(item)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>

                                </tbody>

                            }
                        }
                    </table>
                </div>
            </div>
        </div>
  
        }
        


@code {


    [Parameter]
    public int? Id { get; set; }

    public List<Property> properties = new List<Property>();
    private List<PropertyType> _propertyType = new List<PropertyType>();
    private PropertyOwners _owner = new PropertyOwners();
    //[SupplyParameterFromForm(FormName = "addproperty")]
    private Property _property { get; set; } = new();

    private string? SearchInput;
    private bool displayPdf = false;

    private bool clicked = false;
    private string? ErrorMsg;
    private IBrowserFile? file;
    private long maxSize = 1024 * 1024 * 10;

    protected override async Task OnInitializedAsync()
    {


        // var property = await propertyService.GetAllPropertiresAsync();
        // properties = property;

        using var db = await _factory.CreateDbContextAsync();
        _propertyType = await db.PropertyTypes.ToListAsync();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            if (OwnerService != null)
            {
                using var db = _factory.CreateDbContextAsync();
                var result = await OwnerService.GetOwnerById(Id.Value);
                _owner = result;

                var propertyResult = await db.Result.Properties.Where(u => u.propertyOwnerId == result.Id).ToListAsync();
                properties = propertyResult;
            }
        }

    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    public async Task Search()
    {
        if (SearchInput != null)
        {
            using var db = await _factory.CreateDbContextAsync();
            var result = db.Properties.Where(u => u.Name.Contains(SearchInput)).ToListAsync();


            properties = await result;

        }


    }

    public async Task Delete(Property prop)
    {
        try
        {
            await propertyService.DeletePropertyAsync(prop.Id);
            toast.ShowWarning($"{prop.Name} is deleted succesfully");
            await Task.Delay(500);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (Exception ex)
        {
            toast.ShowWarning($"{ex.Message}");
        }


    }

    public async Task EditCommitee(int Id)
    {
        NavigationManager.NavigateTo($"addproperty/{Id}");
    }

    public async Task DownloadFile(string fileName, string Id)
    {
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);
        // Use the htmlContent variable to generate the PDF

        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);
        // Remove the Action table head
        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }
        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }

        var logo = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-1 py-2')]");
        if (logo != null)
        {
            foreach (var node in logo)
            {
                node.Remove();
            }

        }

        var actionLogo = doc.DocumentNode.SelectSingleNode("//th[text()='Logo']");
        if (actionLogo != null)
        {
            actionLogo.Remove();
        }

        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }
        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }


        htmlContent = doc.DocumentNode.OuterHtml;



        //var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        var pdf = new PdfGenerator();
        pdf.DownloadPdf(jSRuntime, fileName, htmlContent, "Property Report");
    }

    public async Task OpentoIframe(string iframeId, string Id)
    {
        displayPdf = true;
        // var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);

        // Use the htmlContent variable to generate the PDF
        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);

        // Remove the Action table head

        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }

        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }



        // var actionLogo = doc.DocumentNode.SelectSingleNode("//th[text()='Logo']");
        // if (actionLogo != null)
        // {
        //     actionLogo.Remove();
        // }

        var logoHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Logo']");
        if (logoHeader != null)
        {
            logoHeader.Remove();
        }


        var logo = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-1 py-2')]");
        if (logo != null)
        {
            foreach (var item in logo)
            {
                item.Remove();
            }
        }



        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }

        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }



        htmlContent = doc.DocumentNode.OuterHtml;
        var pdf = new PdfGenerator();
        pdf.ViewPdf(jSRuntime, iframeId, htmlContent, "Property Report");
    }

    public async Task AddProp()
    {

        if (_property != null)
        {
            try
            {
                string relativePath = await CaptureFile();
                _property.Logo = relativePath;
                _property.propertyOwnerId = _owner.Id;

                file = null;
                await propertyService.AddProperties(_property);
                toast.ShowSuccess($"{_property.Name}, Property Added Succesfully");
                // if (Id != null)
                // {
                //     await propertyService.EdithProperties(_property);
                //     toast.ShowInfo($"{_property.Name}, Property Edited Succesfully");

                // }
                // else
                // {

                //     await propertyService.AddProperties(_property);
                //     toast.ShowSuccess($"{_property.Name}, Property Added Succesfully");
                // }

            }

            catch (NullReferenceException ex)
            {
                toast.ShowError($"{ex.Message}");
                ErrorMsg = ex.Message;
            }



        }
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            string NewFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "profile", NewFileName);

            string relativePath = Path.Combine("profile", NewFileName);
            Directory.CreateDirectory(Path.Combine(Path.Combine(config.GetValue<string>("FileStorage")!, "profile")));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            //errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    }

    public async Task Click()
    {
        clicked = true;
    }

}