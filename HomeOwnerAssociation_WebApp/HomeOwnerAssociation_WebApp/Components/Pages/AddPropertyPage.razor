@page "/addproperty"
@page "/addproperty/{id:int?}"
@layout CustomLayout
@inject IPropertyServiceRepo propertyService
@rendermode InteractiveServer
@inject IToastService toast
@inject IConfiguration config
@inject IWebHostEnvironment WebHotEnv
@inject IDbContextFactory<ApplicationDbContext> _factory

<BlazoredToasts />

<div class="bg-gray-100 flex-1 p-6 md:mt-16">

    <p>@ErrorMsg</p> 

    <div class="row">
        <div class="col-lg-12">

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Property</h5>

                    <!-- General Form Elements -->
                    <EditForm Model="_property" OnSubmit="Submit" enctype="multipart/form-data" Enhance FormName="addproperty">
                        <div class="row mb-3">
                            <label for="inputText" class="col-sm-2 col-form-label">Full Name</label>
                            <div class="col-sm-8">
                                <input @bind-value="_property.Name" type="text" class="form-control">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="Address" class="col-sm-2 col-form-label">Address</label>
                            <div class="col-sm-8">
                                <input @bind-value="_property.Address" type="text" class="form-control">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="text" class="col-sm-2 col-form-label">Location</label>
                            <div class="col-sm-8">
                                <input @bind-value="_property.Location" type="text" class="form-control">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="text" class="col-sm-2 col-form-label">Logo</label>
                            <div class="col-sm-8">
                                <InputFile  id="image" OnChange="LoadFiles"
                                                       name="file"
                                                       type="file" class="form-control" multiple accept=".png, .jpg, .jpeg"> </InputFile>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="text" class="col-sm-2 col-form-label">Units</label>
                            <div class="col-sm-8">
                                <input @bind-value="_property.Units" type="number" class="form-control">
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="text" class="col-sm-2 col-form-label">PropertyType</label>
                           
                            <div class="col-sm-8">
                                <InputSelect @bind-Value="_property.Units" type="text" class="form-control">
                                    <option disabled>Select option</option>
                                    @foreach (var items in _propertyType)
                                    {
                                        <option value="@items.Id"> @items.UnitType</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label class="col-sm-2 col-form-label">Add Property</label>
                            <div class="col-sm-10">
                                <button type="submit" class="btn btn-primary">Submit Form</button>
                            </div>
                        </div>
                    </EditForm>

                    <!-- End General Form Elements -->

                </div>
            </div>

        </div>
    </div>
</div>




@code {

    [Parameter]

    public int? Id { get; set; }

    [SupplyParameterFromForm(FormName = "addproperty")]
    private Property _property { get; set; } = new();

    private string? ErrorMsg;
    private IBrowserFile? file;
    private long maxSize = 1024 * 1024 * 10;
    private List<PropertyType> _propertyType = new List<PropertyType>();
    private string? imageUrl;

    protected override async Task OnInitializedAsync()
    {
        using var db = await _factory.CreateDbContextAsync();
        _propertyType = await db.PropertyTypes.ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            if (propertyService != null)
            {

                var result = await propertyService.GetPropertyById(Id.Value);
                result.Logo = await CaptureFile();
                _property = result;
            }
        }

    }
    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }
        try
        {
            string NewFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "profile", NewFileName);

            string relativePath = Path.Combine("profile", NewFileName);
            Directory.CreateDirectory(Path.Combine(Path.Combine(config.GetValue<string>("FileStorage")!, "profile")));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            //errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw;
        }


    }

    public async Task Submit()
    {
        if(_property != null)
        {
        try
        {
            string relativePath = await CaptureFile();
            _property.Logo = relativePath;
           
          
            file = null;

            if (Id != null)
            {
                await propertyService.EdithProperties(_property);
                toast.ShowInfo($"{_property.Name}, Property Edited Succesfully");

            }
            else
            {

                await propertyService.AddProperties(_property);
                toast.ShowSuccess($"{_property.Name}, Property Added Succesfully");
            }

        }
            // catch (Exception ex)
            // {
            //     toast.ShowError($"{ex.Message}");
            //         ErrorMsg = ex.Message;
            // }
            catch (NullReferenceException ex)
            {
                toast.ShowError($"{ex.Message}");
                ErrorMsg = ex.Message;
            }
            // catch (FileNotFoundException ex)
            // {
            //     Console.WriteLine($"File not found error: {ex.Message}");
            // }

            
        }
       
    }
}