@page "/listbudget"
@layout CustomLayout
@inject IBank_AccountService bankService
@inject IBudgetingRepositoryService budgetServ
@inject IPropertyServiceRepo propServ
@inject IMaintenanceService _mainServ
@inject IDbContextFactory<ApplicationDbContext> _factory
@inject IToastService toast
@rendermode InteractiveServer
@inject IJSRuntime jSRuntime


<BlazoredToasts />

<div id="pdf-content">


    @if (displayPdf == true)
    {
        <div class="row">
            <div class="col-12">
                <div class="card h-300">
                    <div id="iframeId">

                      Converting to Pdf...
                    </div>
                </div>
            </div>
        </div>

    }

    <div class="container mx-auto p-4">


        <div class="flex justify-end relative inline-block text-left ">


            <button>

                <input type="date" class="bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded" @bind="Date" />
                <span class="ml-2">Pick Date</span>
            </button>
            <div>
                <button type="submit" @onclick="@(p=> DownloadFile("report.pdf", "pdf-content"))">
                    <img src="/save.png" class="iconimg" style="height:40px; width:40px" />


                </button>
            </div>
            <div>
                <button type="submit" @onclick="@(p=> OpentoIframe("iframeId", "pdf-content"))">
                    <img src="/print.png" class="iconimg" style="height:40px; width:40px" />

                </button>

            </div>
            

        </div>




        <!-- Financial History Card -->
        <div class="bg-white shadow-md rounded-lg p-6 col-span-full">
            <p class="bg-blue-500 hover:bg-blue-100 text-white font-bold py-2 px-4 rounded">Budgeting History</p>

            <table class="table table-striped w-full text-left">
                <thead>
                    <tr>
                        <th class="py-2">Id</th>
                        <th class="py-2">Name</th>
                        <th class="py-2">Description</th>
                         <th class="py-2">Amount</th>
                        <th class="py-2">Date</th>
                        <th class="py-2">Type</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in _bud)
                    {
                        
                        <tr>
                            <td class="py-2">@item.Id</td>
                            <td class="py-2">@item.Name</td>
                            <td class="py-2">@item.Description</td>
                            <td class="py-2">@item.Cost</td>
                            <td class="py-2">@item.DateOfExpenses.ToString("dd/MM/yyyy")</td>
                            <td class="py-2">@item.typeOfBudget</td>
                        </tr>
                        
                    }

                </tbody>
            </table>


        </div>
    </div>

</div>


@code {


    private BankAccount _bank = new BankAccount();


    private List<Budgeting> _bud = new List<Budgeting>();
    private bool displayPdf = false;




    private DateTime _date = DateTime.Now;
    public DateTime Date
    {
        get => _date;
        set
        {
            _date = value;
            CheckDate(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var db = _factory.CreateDbContextAsync();
        _bud = await budgetServ.GetAllBudgetingAsync();

    }


    public async Task CheckDate(DateTime _date)
    {
        using var db = await _factory.CreateDbContextAsync();
        var bud = await db.Budgetings.Where(u => u.DateOfExpenses.Month == _date.Month).ToListAsync();


        _bud = bud;
        toast.ShowWarning($"{_date.Month} is Selected succesfully");
        StateHasChanged();
    }



    public async Task DownloadFile(string fileName, string Id)
    {
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);
        // Use the htmlContent variable to generate the PDF

        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);
        // Remove the Action table head
        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }

        var DateText = doc.DocumentNode.SelectNodes("//span[contains(@class, 'ml-2')]");
        if (DateText != null)
        {
            foreach (var node in DateText)
            {
                node.Remove();
            }
        }
        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }

        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }
        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }


        htmlContent = doc.DocumentNode.OuterHtml;



        //var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        var pdf = new PdfGenerator();
        pdf.DownloadPdf(jSRuntime, fileName, htmlContent, "Financial Report");
    }

    public async Task OpentoIframe(string iframeId, string Id)
    {
        displayPdf = true;
        // var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);
        // Use the htmlContent variable to generate the PDF


        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);
        // Remove the Action table head
        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }
        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }

        var DateText = doc.DocumentNode.SelectNodes("//span[contains(@class, 'ml-2')]");
        if (DateText != null)
        {
            foreach (var node in DateText)
            {
                node.Remove();
            }
        }

        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }
        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }



        htmlContent = doc.DocumentNode.OuterHtml;
        var pdf = new PdfGenerator();
        pdf.ViewPdf(jSRuntime, iframeId, htmlContent, "Maintenance Report");
    }
}






