@page "/budgeting"
@page "/budgeting/{id:int?}"
@layout CustomLayout
@inject IBank_AccountService bankService
@* @inject IPropertyOwnerService OwnerService *@
@inject IPropertyServiceRepo propService
@inject IBudgetingRepositoryService _budgetServ
@inject IDbContextFactory<ApplicationDbContext> _factory
@inject IToastService toast
@rendermode InteractiveServer


<BlazoredToasts />

<div class="text-center text-lg font-bold mb-2 p-2">
    <h1>Budgeting History Report</h1><br />
    <h1>
        @_getproperty.Name
    </h1>
</div>

@* <div class="grid grid-cols-6 gap-4">

    <div class="col-start-1 col-end-3 ...">Name: @_owner.FullName</div>
    <div class="col-end-7 col-span-2 ...">Address: @_owner.Address</div>
    <div class="col-start-1 col-end-3 ...">Phone: @_owner.Phone</div>
    <div class="col-end-7 col-span-2  ...">Email: @_owner.Email</div>
</div> *@


<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">Budget History</h1>

    
    <!-- Financial History Card -->
    <div class="bg-white shadow-md rounded-lg p-6 col-span-full">
        <h2 class="text-xl font-semibold mb-2">Budget History    <input type="date" @bind="Date" /></h2>
        <table class="w-full text-left">
            <thead>
                <tr>
                    <th class="py-2">Id</th>
                    <th class="py-2">Name</th>
                    <th class="py-2">Description</th>
                    <th class="py-2">Cost</th>
                    <th class="py-2">BudgetType</th>
                    <th class="py-2">ExpenseType</th>
                    <th class="py-2">Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _budget)
                {
                    @* var property = _Newproperty.Where(s => s.Id == item.propertyId).ToList();
                    @foreach (var prop in _Newproperty.Where(s => s.Id == item.propertyId))
                    { *@
                        <tr>
                            <td class="py-2">@item.Id</td>
                            <td class="py-2">@item.Name</td>
                            <td class="py-2">@item.Description</td>

                            <td class="py-2">@item.Cost</td>

                            <td class="py-2">@item.typeOfBudget</td>
                            <td class="py-2">@item.ExpensesType</td>
                            <td class="py-2">@item.DateOfExpenses.ToString("dd/MM/yyyy")</td>
                        </tr>
                    @* } *@
                }

            </tbody>
        </table>
    </div>
</div>


@code {

    [Parameter]
    public int? Id { get; set; }
    private BankAccount _bank = new BankAccount();
    public List<Fee> _fee = new List<Fee>();
    public List<Budgeting> _budget = new List<Budgeting>();
   // private PropertyOwners _owner = new PropertyOwners();

    private List<MaintenanceHistory> _maintenance = new List<MaintenanceHistory>();
    public List<Property> _Newproperty = new List<Property>();

    private Property _getproperty = new Property();

    private DateTime _date = DateTime.Now;
    public DateTime Date
    {
        get => _date;
        set
        {
            _date = value;
            CheckDate(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {



    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            using var db = _factory.CreateDbContextAsync();


            var Dfee = await db.Result.Fees.Where(u => u.PropertyId == Id.Value).ToListAsync(); //FeeService.GetAllFeesAsync();
            _fee = Dfee;
            if (propService != null)
            {
                var result = await propService.GetPropertyById(Id.Value);
                _getproperty = result;

                // var result = await propService.GetPropertyById(Id.Value);
                // _owner = result;

                var bud = await _budgetServ.GetAllBudgetingAsync();
                _budget = bud;

                _maintenance = await db.Result.Maintenances.Where(s => s.propertyId == _getproperty.Id).ToListAsync();

                var propertyResult = await db.Result.Properties.Where(u => u.propertyOwnerId == result.Id).ToListAsync();
                _Newproperty = propertyResult;


            }
        }

    }

    public async Task CheckDate(DateTime _date)
    {
        using var db = await _factory.CreateDbContextAsync();
        var bud = await db.Budgetings.Where(u => u.DateOfExpenses.Month == _date.Month).ToListAsync();
        

        _budget = bud;
        toast.ShowWarning($"{_date.Month} is Selected succesfully");
        StateHasChanged();
    }
}






