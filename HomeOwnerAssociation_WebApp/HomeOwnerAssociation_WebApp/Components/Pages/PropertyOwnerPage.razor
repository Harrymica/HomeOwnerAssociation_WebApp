@page "/propertyowner"
@layout CustomLayout
@inject IPropertyOwnerService OwnerService
@inject IToastService toast
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IConfiguration config
@inject IDbContextFactory<ApplicationDbContext> _factory
@inject IJSRuntime jSRuntime



<BlazoredToasts />


@if(displayPdf == true)
{
<div class="row">
    <div class="col-12">
        <div class="card h-300">
            <div id="iframeId">

                Hello world
            </div>
        </div>
    </div>
</div>
    
}

<div class=" flex-1 p-6 md:mt-16">
   
    <div class="relative">
        <input @bind-value="@SearchInput" type="search" placeholder="Search Commitee..." class="w-full pl-10 pr-16 py-2 text-sm text-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <button class="absolute right-0 top-0 h-full flex items-center justify-center w-10 bg-blue-500 hover:bg-blue-700 text-white rounded-r-md" @onclick="Search">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
        </button>
        <span class="absolute inset-y-0 left-0 flex items-center pl-2">
            <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="(link unavailable)">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </span>

       
    </div>

    <div class="flex justify-end relative inline-block text-left ">
        
        <div>
            <button type="submit" @onclick="@(p=> DownloadFile("report.pdf", "pdf-content"))">
                <img src="/save.png" class="iconimg" style="height:35px" />


            </button>
        </div>
        <div>
            <button type="submit" @onclick="@(p=> OpentoIframe("iframeId", "pdf-content"))">
                <img src="/print.png" class="iconimg" style="height:35px" />

            </button>

        </div>
        <div>
            <a href="/addpropertyowner" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-4">

                <i class="fas fa-plus"></i>
                Add Owner
            </a>
        </div>

  </div>


    <div class="myTable">

      
        <div class="row">
            <div class="col-md-12">
                
                <div class="p-3" id="pdf-content">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th > Id</th>
                                <th > Name</th>
                                <th >Address</th>
                                <th >Location</th>
                                <th >Phone</th>
                                <th >Actions</th>
                                
                               
                            </tr>
                        </thead>
                        @if (_owner != null)
                        {
                            foreach (var item in MenuItems)
                            @* (var item in _owner) *@
                            {

                                <tbody>
                                    <tr>

                                        <td class="border px-1 py-2">
                                            <a href="/addfees/@item.Item.Id">
                                                @item.Item.Id

                                            </a>
                                        </td>
                                        <td class="border px-4 py-2">@item.Item.FullName</td>
                                        <td class="border px-4 py-2">@item.Item.Address</td>
                                        <td class="border px-4 py-2">@item.Item.Email</td>
                                        <td class="border px-4 py-2">@item.Item.Phone</td>


                                        <td class="border px-2 py-2" >
                                            <div class="relative inline-block text-left">

                                                <div >
                                                    <button type="submit" class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
                                                            id="menu-button" aria-expanded="true" aria-haspopup="true" @onclick="()=> item.ShowDropdown = !item.ShowDropdown">

                                                        <i class="fas fa-ellipsis-v"></i>


                                                    </button>
                                                </div>
                                                @if (item.ShowDropdown)
                                                {
                                                    <div class="mybtn">
                                                        <div class="absolute right-0 z-10 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                                                            <div class="py-1" role="none">

                                                                <button type="submit" @onclick="() => EditCommitee(item.Item.Id)" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-0">Edit</button>
                                                              @*   <a href="/addfees/@item.Item.Id" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-1">AddFees</a> *@
                                                            </div>

                                                            <div class="py-1" role="none">
                                                                
                                                               
                                                                <a href="/specificproperty/@item.Item.Id" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-1">Property</a>
                                                            </div>

                                                            
                                                            <div class="py-1" role="none">
                                                                <button type="submit" @onclick="() => Delete(item.Item)" href="#" class="block px-4 py-2 text-sm text-gray-700" role="menuitem" tabindex="-1" id="menu-item-6">Delete</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }

                                                
                                            </div>

                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-white" @onclick="() => EditCommitee(item.Item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="bg-teal-300 cursor-pointer rounded p-1 mx-1 text-red-500" @onclick="() => Delete(item.Item)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                        

                                        

                                    </tr>

                                </tbody>

                            }
                        }
                    </table>
                </div>
            </div>
        </div>
      
    </div>
</div>



@code {

    public List<MenuItem> MenuItems { get; set; } = new List<MenuItem>();

    public List<PropertyOwners> _owner = new List<PropertyOwners>();
    private List<PropertyType> _propertyType = new List<PropertyType>();

    private bool showDropdown = false;

    public string ErrorMsg = "hello";
    private string? SearchInput;

    private bool displayPdf = false;



    protected override void  OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            jSRuntime.InvokeVoidAsync("closeDropdownMenu");
        }
    }

    private void ShowDropdownMenu()
    {
        showDropdown = !showDropdown;
    }

    protected override async Task OnInitializedAsync()
    {


        var owner = await OwnerService.GetAllOwnersAsync();
        _owner = owner;

        MenuItems = owner.Select(p => new MenuItem { Item = p, ShowDropdown = false }).ToList();

        using var db = await _factory.CreateDbContextAsync();
        _propertyType = await db.PropertyTypes.ToListAsync();
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    public async Task Search()
    {
        if (SearchInput != null)
        {
            using var db = await _factory.CreateDbContextAsync();
            var result = db.PropertyOwners.Where(u => u.FullName.Contains(SearchInput)).ToListAsync();


            _owner = await result;

        }


    }

    public async Task Delete(PropertyOwners Owner)
    {
        var result = OwnerService.DeleteOwnerAsync(Owner.Id);

        if (OwnerService != null && Owner != null)
        {

            //using var db = await _factory.CreateDbContextAsync();
            // try
            // {
            //     //var result = OwnerService.DeleteOwnerAsync(Owner.Id);

            //     if (result.IsCompletedSuccessfully)
            //     {

                    //var res = db.PropertyOwners.Remove(Owner);           
                    toast.ShowWarning($"{Owner.FullName}, and all his component is Deleted Successully");
                    await Task.Delay(1500);
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

                // }
                // else
                // {
                //     toast.ShowWarning($"{result.Exception!.Message}");
                //     // ErrorMsg = result.Exception.Message.ToString();
                //     // StateHasChanged();

                // }
            // }
            // catch (Exception ex)
            // {
            //     toast.ShowError($"{ex.Message}");
            // }

        }
        else
        {
            toast.ShowError("Owner or OwnerService is null");

        }

    }

    public async Task EditCommitee(int Id)
    {
        NavigationManager.NavigateTo($"addpropertyowner/{Id}");
    }


    public class MenuItem
    {
        public PropertyOwners Item { get; set; }
        public bool ShowDropdown { get; set; }
    }

    public async Task DownloadFile(string fileName, string Id)
    {
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);
        // Use the htmlContent variable to generate the PDF

        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);
        // Remove the Action table head
        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }
        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }

        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }
        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }


        htmlContent = doc.DocumentNode.OuterHtml;



        //var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        var pdf = new PdfGenerator();
        pdf.DownloadPdf(jSRuntime, fileName, htmlContent, "Property Report");
    }

    public async Task OpentoIframe(string iframeId, string Id)
    {
        displayPdf = true;
        // var html = await jsRuntime.InvokeAsync<string>("GetHtml");
        string htmlContent = await jSRuntime.InvokeAsync<string>("GetElementHtml", Id);
        // Use the htmlContent variable to generate the PDF


        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(htmlContent);
        // Remove the Action table head
        var actionHeader = doc.DocumentNode.SelectSingleNode("//th[text()='Actions']");
        if (actionHeader != null)
        {
            actionHeader.Remove();
        }
        // Remove the Action table data
        var actionData = doc.DocumentNode.SelectNodes("//td[contains(@class, 'border px-2 py-2')]");
        if (actionData != null)
        {
            foreach (var node in actionData)
            {
                node.Remove();
            }
        }
        var saveButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> DownloadFile(\"report.pdf\", \"pdf-content\"))']");
        if (saveButton != null)
        {
            saveButton.Remove();
        }
        var printButton = doc.DocumentNode.SelectSingleNode("//button[@onclick='@(p=> OpentoIframe(\"iframeId\", \"pdf-content\"))']");
        if (printButton != null)
        {
            printButton.Remove();
        }
        var images = doc.DocumentNode.SelectNodes("//img");
        if (images != null)
        {
            foreach (var image in images)
            {
                image.Remove();
            }
        }



        htmlContent = doc.DocumentNode.OuterHtml;
        var pdf = new PdfGenerator();
        pdf.ViewPdf(jSRuntime, iframeId, htmlContent, "Property Report");
    }
}

